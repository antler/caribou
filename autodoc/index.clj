{:namespaces
 ({:source-url nil,
   :wiki-url "caribou.action.adapter-api.html",
   :name "caribou.action.adapter",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.api-api.html",
   :name "caribou.api",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.app.config-api.html",
   :name "caribou.app.config",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.app.controller-api.html",
   :name "caribou.app.controller",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.app.template.freemarker-api.html",
   :name "caribou.app.template.freemarker",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.app.view-api.html",
   :name "caribou.app.view",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.core-api.html",
   :name "caribou.core",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.db-api.html",
   :name "caribou.db",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.debug-api.html",
   :name "caribou.debug",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.image-api.html",
   :name "caribou.image",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.logger-api.html",
   :name "caribou.logger",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.migration-api.html",
   :name "caribou.migration",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.model-api.html",
   :name "caribou.model",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.page-api.html",
   :name "caribou.page",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.template.adapter-api.html",
   :name "caribou.template.adapter",
   :doc nil}
  {:source-url nil,
   :wiki-url "caribou.util-api.html",
   :name "caribou.util",
   :doc nil}
  {:source-url nil,
   :wiki-url "leiningen.bootstrap-api.html",
   :name "leiningen.bootstrap",
   :doc nil}
  {:source-url nil,
   :wiki-url "leiningen.migrate-api.html",
   :name "leiningen.migrate",
   :doc nil}),
 :vars
 ({:arglists ([params]),
   :name "ensure-lists-in",
   :namespace "caribou.api",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.api-api.html#caribou.api/ensure-lists-in",
   :doc "flatten nested params into lists",
   :var-type "function",
   :line 128,
   :file "src/caribou/api.clj"}
  {:arglists ([col]),
   :name "ensure-seq",
   :namespace "caribou.api",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.api-api.html#caribou.api/ensure-seq",
   :doc
   "if given a map, convert to a seq containing only its values.\notherwise, leave it alone",
   :var-type "function",
   :line 116,
   :file "src/caribou/api.clj"}
  {:arglists ([env]),
   :name "init",
   :namespace "caribou.app.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.app.config-api.html#caribou.app.config/init",
   :doc
   "initialize the app's config.  expects the environment (hard-coded to :production for now)",
   :var-type "function",
   :line 34,
   :file "src/caribou/app/config.clj"}
  {:arglists ([filename env]),
   :name "process-db-config",
   :namespace "caribou.app.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.app.config-api.html#caribou.app.config/process-db-config",
   :doc
   "given the path to a yaml config file, produce the map representing it.\nthe config is of the form:\nproduction:\n    classname: org.postgresql.Driver\n    subprotocol: postgresql\n    host: localhost\n    database: caribou\n    user: postgres",
   :var-type "function",
   :line 18,
   :file "src/caribou/app/config.clj"}
  {:arglists ([template-name]),
   :name "get-template",
   :namespace "caribou.app.template.freemarker",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.app.template.freemarker-api.html#caribou.app.template.freemarker/get-template",
   :doc "Gets a Freemarker template from the Configuration",
   :var-type "function",
   :line 16,
   :file "src/caribou/app/template/freemarker.clj"}
  {:arglists ([template-path]),
   :name "init",
   :namespace "caribou.app.template.freemarker",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.app.template.freemarker-api.html#caribou.app.template.freemarker/init",
   :doc "Set up our Freemarker config",
   :var-type "function",
   :line 8,
   :file "src/caribou/app/template/freemarker.clj"}
  {:arglists ([template root template-length] [template root]),
   :name "render",
   :namespace "caribou.app.template.freemarker",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.app.template.freemarker-api.html#caribou.app.template.freemarker/render",
   :doc "Process a Freemarker template, returns a String",
   :var-type "function",
   :line 21,
   :file "src/caribou/app/template/freemarker.clj"}
  {:arglists ([template-name]),
   :name "render-wrapper",
   :namespace "caribou.app.template.freemarker",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.app.template.freemarker-api.html#caribou.app.template.freemarker/render-wrapper",
   :doc "Wraps a template filename in a render",
   :var-type "function",
   :line 32,
   :file "src/caribou/app/template/freemarker.clj"}
  {:arglists ([table column opts]),
   :name "add-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/add-column",
   :doc "add the given column to the table.",
   :var-type "function",
   :line 128,
   :file "src/caribou/db.clj"}
  {:arglists ([db-config new-db]),
   :name "change-db-keep-host",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/change-db-keep-host",
   :doc
   "given the current db config, change the database but keep the hostname",
   :var-type "function",
   :line 159,
   :file "src/caribou/db.clj"}
  {:arglists ([table id]),
   :name "choose",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/choose",
   :doc "pull just the record with the given id from the given table",
   :var-type "function",
   :line 97,
   :file "src/caribou/db.clj"}
  {:arglists ([pred args]),
   :name "clause",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/clause",
   :doc
   "substitute values into a string template based on numbered % parameters",
   :var-type "function",
   :line 16,
   :file "src/caribou/db.clj"}
  {:arglists ([name]),
   :name "create-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/create-database",
   :doc "create a database of the given name",
   :var-type "function",
   :line 176,
   :file "src/caribou/db.clj"}
  {:arglists ([table & fields]),
   :name "create-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/create-table",
   :doc
   "create a table with the given columns, of the format\n[:column_name :type & :extra]",
   :var-type "function",
   :line 109,
   :file "src/caribou/db.clj"}
  {:arglists ([table & where]),
   :name "delete",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/delete",
   :doc
   "delete out of the given table according to the supplied where clause",
   :var-type "function",
   :line 85,
   :file "src/caribou/db.clj"}
  {:arglists ([commands]),
   :name "do-sql",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/do-sql",
   :doc "execute arbitrary sql.  direct proxy to sql/do-commands.",
   :var-type "function",
   :line 154,
   :file "src/caribou/db.clj"}
  {:arglists ([table column]),
   :name "drop-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-column",
   :doc "remove the given column from the table.",
   :var-type "function",
   :line 148,
   :file "src/caribou/db.clj"}
  {:arglists ([name]),
   :name "drop-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-database",
   :doc "drop a database of the given name",
   :var-type "function",
   :line 166,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "drop-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/drop-table",
   :doc "remove the given table from the database.",
   :var-type "function",
   :line 122,
   :file "src/caribou/db.clj"}
  {:arglists ([table & where]),
   :name "fetch",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/fetch",
   :doc
   "pull all items from a table according to the given conditions",
   :var-type "function",
   :line 91,
   :file "src/caribou/db.clj"}
  {:arglists ([table values]),
   :name "insert",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/insert",
   :doc "insert a row into the given table with the given values",
   :var-type "function",
   :line 64,
   :file "src/caribou/db.clj"}
  {:arglists ([q & args]),
   :name "query",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/query",
   :doc
   "make an arbitrary query, substituting in extra args as % parameters",
   :var-type "function",
   :line 32,
   :file "src/caribou/db.clj"}
  {:arglists ([name]),
   :name "rebuild-database",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rebuild-database",
   :doc "drop and recreate the given database",
   :var-type "function",
   :line 186,
   :file "src/caribou/db.clj"}
  {:arglists ([table column new-name]),
   :name "rename-column",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rename-column",
   :doc "rename a column in the given table to new-name.",
   :var-type "function",
   :line 142,
   :file "src/caribou/db.clj"}
  {:arglists ([table new-name]),
   :name "rename-table",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/rename-table",
   :doc "change the name of a table to new-name.",
   :var-type "function",
   :line 116,
   :file "src/caribou/db.clj"}
  {:arglists ([table column default]),
   :name "set-default",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/set-default",
   :doc "sets the default for a column",
   :var-type "function",
   :line 135,
   :file "src/caribou/db.clj"}
  {:arglists ([value]),
   :name "sqlize",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/sqlize",
   :doc "process a raw value into a sql appropriate string",
   :var-type "function",
   :line 49,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "table?",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/table?",
   :doc "check to see if a table by the given name exists",
   :var-type "function",
   :line 104,
   :file "src/caribou/db.clj"}
  {:arglists ([table]),
   :name "tally",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/tally",
   :doc "return how many total records are in this table",
   :var-type "function",
   :line 197,
   :file "src/caribou/db.clj"}
  {:arglists ([table values & where]),
   :name "update",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/update",
   :doc "update the given row with the given values",
   :var-type "function",
   :line 76,
   :file "src/caribou/db.clj"}
  {:arglists ([values]),
   :name "value-map",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/value-map",
   :doc
   "build a string of values fit for an insert or update statement",
   :var-type "function",
   :line 59,
   :file "src/caribou/db.clj"}
  {:arglists ([s]),
   :name "zap",
   :namespace "caribou.db",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.db-api.html#caribou.db/zap",
   :doc
   "quickly sanitize a potentially dirty string in preparation for a sql query",
   :var-type "function",
   :line 8,
   :file "src/caribou/db.clj"}
  {:arglists ([locals form]),
   :name "eval-with-locals",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/eval-with-locals",
   :doc
   "Evals a form with given locals.  The locals should be a map of symbols to\nvalues.",
   :var-type "function",
   :line 16,
   :file "src/caribou/debug.clj"}
  {:arglists ([]),
   :name "local-bindings",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/local-bindings",
   :doc
   "Produces a map of the names of local bindings to their values.",
   :var-type "macro",
   :line 9,
   :file "src/caribou/debug.clj"}
  {:arglists ([]),
   :name "repl",
   :namespace "caribou.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.debug-api.html#caribou.debug/repl",
   :doc "Starts a REPL with the local bindings available.",
   :var-type "macro",
   :line 25,
   :file "src/caribou/debug.clj"}
  {:file "src/caribou/model.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/Field",
   :namespace "caribou.model",
   :line 17,
   :var-type "var",
   :doc "a protocol for expected behavior of all model fields",
   :name "Field"}
  {:arglists ([slug timing id hook]),
   :name "add-hook",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/add-hook",
   :doc
   "add a hook for the given model slug for the given timing.\neach hook must have a unique id, or it overwrites the previous hook at that id.",
   :var-type "function",
   :line 669,
   :file "src/caribou/model.clj"}
  {:arglists ([model]),
   :name "alter-models",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/alter-models",
   :doc
   "inserts a single model into the hash of cached model records.",
   :var-type "function",
   :line 687,
   :file "src/caribou/model.clj"}
  {:arglists ([items]),
   :name "arrange-tree",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/arrange-tree",
   :doc
   "given a set of nested items, arrange them into a tree\nbased on id/parent_id relationships.",
   :var-type "function",
   :line 903,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/cleanup-field",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this]),
   :doc "further processing on removal of field",
   :name "cleanup-field"}
  {:arglists ([slug spec]),
   :name "create",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/create",
   :doc
   "slug represents the model to be updated.\nthe spec contains all information about how to update this row,\nincluding nested specs which update across associations.\nthe only difference between a create and an update is if an id is supplied,\nhence this will automatically forward to update if it finds an id in the spec.\nthis means you can use this create method to create or update something,\nusing the presence or absence of an id to signal which operation gets triggered.",
   :var-type "function",
   :line 797,
   :file "src/caribou/model.clj"}
  {:arglists ([name]),
   :name "create-model-table",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/create-model-table",
   :doc "create an table with the given name.",
   :var-type "function",
   :line 693,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id] [slug id opts]),
   :name "descendents",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/descendents",
   :doc
   "pull up all the descendents of the item given by id\nin the nested model given by slug.",
   :var-type "function",
   :line 883,
   :file "src/caribou/model.clj"}
  {:arglists ([slug id]),
   :name "destroy",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/destroy",
   :doc "destroy the item of the given model with the given id.",
   :var-type "function",
   :line 851,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/field-from",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content opts]),
   :doc "retrieves the value for this field from this content item",
   :name "field-from"}
  {:arglists ([fields content opts]),
   :name "fields-render",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/fields-render",
   :doc "render all fields out to a string friendly format",
   :var-type "function",
   :line 621,
   :file "src/caribou/model.clj"}
  {:arglists ([date]),
   :name "format-date",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/format-date",
   :doc
   "given a date object, return a string representing the canonical format for that date",
   :var-type "function",
   :line 12,
   :file "src/caribou/model.clj"}
  {:arglists ([model content opts]),
   :name "from",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/from",
   :doc
   "takes a model and a raw db row and converts it into a full\ncontent representation as specified by the supplied opts.\nsome opts that are supported:\n  include - a nested hash of association includes.  if a key matches\n  the name of an association any content associated to this item through\n  that association will be inserted under that key.",
   :var-type "function",
   :line 290,
   :file "src/caribou/model.clj"}
  {:arglists ([]),
   :name "init",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/init",
   :doc "run any necessary initialization for the model environment.",
   :var-type "function",
   :line 911,
   :file "src/caribou/model.clj"}
  {:arglists ([model]),
   :name "invoke-model",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/invoke-model",
   :doc
   "translates a row from the model table into a nested hash with references\nto its fields in a hash with keys being the field slugs\nand vals being the field invoked as a Field protocol record.",
   :var-type "function",
   :line 677,
   :file "src/caribou/model.clj"}
  {:arglists ([]),
   :name "invoke-models",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/invoke-models",
   :doc
   "call to populate the application model cache in model/models.\n(otherwise we hit the db all the time with model and field selects)\nthis also means if a model or field is changed in any way that model will\nhave to be reinvoked to reflect the current state.",
   :var-type "function",
   :line 781,
   :file "src/caribou/model.clj"}
  {:arglists ([a b]),
   :name "join-table-name",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/join-table-name",
   :doc "construct a join table name out of two link names",
   :var-type "function",
   :line 474,
   :file "src/caribou/model.clj"}
  {:arglists ([row]),
   :name "make-field",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/make-field",
   :doc
   "turn a row from the field table into a full fledged Field record",
   :var-type "function",
   :line 616,
   :file "src/caribou/model.clj"}
  {:arglists ([slug]),
   :name "make-lifecycle-hooks",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/caribou.model-api.html#caribou.model/make-lifecycle-hooks",
   :doc
   "establish the set of functions which are called throughout the lifecycle\nof all rows for a given model (slug).  the possible hook points are:\n  :before_create     -- called for create only, before the record is made\n  :after_create      -- called for create only, now the record has an id\n  :before_update     -- called for update only, before any changes are made\n  :after_update      -- called for update only, now the changes have been committed\n  :before_save       -- called for create and update\n  :after_save        -- called for create and update\n  :before_destroy    -- only called on destruction, record has not yet been removed\n  :after_destroy     -- only called on destruction, now the db has no record of it",
   :var-type "function",
   :line 636,
   :file "src/caribou/model.clj"}
  {:arglists ([model content opts]),
   :name "model-render",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/model-render",
   :doc
   "render a piece of content according to the fields contained in the model\nand given by the supplied opts",
   :var-type "function",
   :line 628,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/post-update",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content]),
   :doc
   "any processing that is required after the content is created/updated",
   :name "post-update"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/pre-destroy",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content]),
   :doc "prepare this content item for destruction",
   :name "pre-destroy"}
  {:arglists ([slug id] [slug id opts]),
   :name "progenitors",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/progenitors",
   :doc
   "if the model given by slug is nested,\nreturn a list of the item given by this id along with all of its ancestors.",
   :var-type "function",
   :line 869,
   :file "src/caribou/model.clj"}
  {:arglists ([slug] [slug opts]),
   :name "rally",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/rally",
   :doc
   "pull a set of content up through the model system with the given options.",
   :var-type "function",
   :line 820,
   :file "src/caribou/model.clj"}
  {:arglists ([mapping node]),
   :name "reconstruct",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/reconstruct",
   :doc
   "mapping is between parent_ids and collections which share a parent_id.\nnode is the item whose descendent tree is to be reconstructed.",
   :var-type "function",
   :line 897,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/render",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content opts]),
   :doc "renders out a single field from this content item",
   :name "render"}
  {:arglists ([slug timing env]),
   :name "run-hook",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/run-hook",
   :doc
   "run the hooks for the given model slug given by timing.\nenv contains any necessary additional information for the running of the hook",
   :var-type "function",
   :line 660,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/setup-field",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this spec]),
   :doc "further processing on creation of field",
   :name "setup-field"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/subfield-names",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this field]),
   :doc
   "the names of any additional fields added to the model\nby this field given this name",
   :name "subfield-names"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/table-additions",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this field]),
   :doc
   "the set of additions to this db table based on the given name",
   :name "table-additions"}
  {:arglists ([slug]),
   :name "table-columns",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/table-columns",
   :doc
   "return a list of all columns for the table corresponding to this model.",
   :var-type "function",
   :line 863,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/target-for",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this]),
   :doc "retrieves the model this field points to, if applicable",
   :name "target-for"}
  {:arglists ([slug id spec]),
   :name "update",
   :namespace "caribou.model",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/update",
   :doc
   "slug represents the model to be updated.\nid is the specific row to update.\nthe spec contains all information about how to update this row,\nincluding nested specs which update across associations.",
   :var-type "function",
   :line 831,
   :file "src/caribou/model.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/caribou.model-api.html#caribou.model/update-values",
   :namespace "caribou.model",
   :var-type "function",
   :arglists ([this content values]),
   :doc
   "adds to the map of values that will be committed to the db for this row",
   :name "update-values"}
  {:arglists ([pages app-path]),
   :name "generate-routes",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/generate-routes",
   :doc
   "given a tree of pages construct and return a list of corresponding routes.",
   :var-type "function",
   :line 77,
   :file "src/caribou/page.clj"}
  {:arglists ([]),
   :name "init",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/init",
   :doc "initialize page related activities",
   :var-type "function",
   :line 111,
   :file "src/caribou/page.clj"}
  {:arglists ([]),
   :name "invoke-pages",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/invoke-pages",
   :doc "call up the pages and arrange them into a tree.",
   :var-type "function",
   :line 89,
   :file "src/caribou/page.clj"}
  {:arglists ([]),
   :name "invoke-routes",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/invoke-routes",
   :doc
   "invoke pages from the db and generate the routes based on them.",
   :var-type "macro",
   :line 97,
   :file "src/caribou/page.clj"}
  {:arglists ([app-path]),
   :name "load-templates",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/load-templates",
   :doc
   "recurse through the view directory and add all the templates that can be found",
   :var-type "function",
   :line 58,
   :file "src/caribou/page.clj"}
  {:arglists ([page above-path above-action]),
   :name "make-route",
   :namespace "caribou.page",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/caribou.page-api.html#caribou.page/make-route",
   :doc
   "make a single route for a single page, given its overarching path (above-path)\nand action directory on disk (above-action).",
   :var-type "function",
   :line 34,
   :file "src/caribou/page.clj"})}
